function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import SideTabBar from './SideTabBar';

const TabBarView = ({
  tabBar = props => /*#__PURE__*/React.createElement(SideTabBar, props),
  tabBarOptions,
  state,
  navigation,
  descriptors
}) => {
  const route = state.routes[state.index];
  const descriptor = descriptors[route.key];
  const options = descriptor.options;

  if (options.tabBarVisible === false) {
    return null;
  }

  return tabBar(_objectSpread({}, tabBarOptions, {
    state: state,
    descriptors: descriptors,
    navigation: navigation
  }));
};

export default TabBarView;
//# sourceMappingURL=TabBarView.js.map