function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect } from 'react';
import { View, StyleSheet, Text } from 'react-native';
import { TabNavigationState } from '@react-navigation/native';
import { useTheme } from '../theming';
import { ScreenContainer } from 'react-native-screens';
import SafeAreaProviderCompat from './SafeAreaProviderCompat';
import ResourceSavingScene from './ResourceSavingScene';
import TabBarView from './TabBarView';
import Header from './Header/Header';

function SceneContent({
  isFocused,
  children
}) {
  const {
    colors
  } = useTheme();
  return /*#__PURE__*/React.createElement(View, {
    accessibilityElementsHidden: !isFocused,
    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',
    style: [styles.content, {
      backgroundColor: 'red'
    }]
  }, children);
}

const SideTabView = props => {
  const {
    state,
    descriptors,
    lazy
  } = props,
        rest = _objectWithoutProperties(props, ["state", "descriptors", "lazy"]);

  const {
    routes
  } = state;
  const [loaded, setLoaded] = useState([state.index]);
  useEffect(() => {
    setLoaded([...loaded, state.index]);
  }, [state.index]);
  return /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(View, {
    style: [styles.container]
  }, /*#__PURE__*/React.createElement(TabBarView, props), /*#__PURE__*/React.createElement(ScreenContainer, {
    style: styles.pages
  }, routes.map((route, index) => {
    const descriptor = descriptors[route.key];
    const {
      unmountOnBlur
    } = descriptor.options;
    const isFocused = state.index === index;

    if (unmountOnBlur && !isFocused) {
      return null;
    }

    if (lazy && !loaded.includes(index) && !isFocused) {
      // Don't render a screen if we've never navigated to it
      return null;
    }

    return /*#__PURE__*/React.createElement(ResourceSavingScene, {
      key: route.key,
      style: StyleSheet.absoluteFill,
      isVisible: isFocused
    }, /*#__PURE__*/React.createElement(Header, {
      descriptor: descriptor
    }), /*#__PURE__*/React.createElement(SceneContent, {
      isFocused: isFocused
    }, descriptor.render()));
  }))));
};

SideTabView.defaultProps = {
  lazy: true
};
const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    flex: 1,
    overflow: 'hidden',
    overflow: 'purple'
  },
  pages: {
    flex: 1
  },
  content: {
    flex: 1
  }
});
export default SideTabView;
//# sourceMappingURL=SideTabView.js.map