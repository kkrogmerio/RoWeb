{"version":3,"sources":["SideTabBar.js"],"names":["React","View","Animated","StyleSheet","Keyboard","Platform","LayoutChangeEvent","ScaledSize","NavigationContext","NavigationRouteContext","CommonActions","useTheme","SafeAreaConsumer","SideTabItem","DEFAULT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","OS","SideTabBar","state","navigation","descriptors","activeBackgroundColor","activeTintColor","iconHorizontal","adaptive","allowFontScaling","inactiveBackgroundColor","inactiveTintColor","keyboardHidesTabBar","labelPosition","labelStyle","showIcon","showLabel","iconSize","labelSize","style","tabWidth","tabStyle","colors","visible","useState","Value","routes","insets","styles","tabBar","backgroundColor","card","borderRightColor","border","paddingTop","top","content","map","route","index","focused","options","key","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","navigate","name","onLongPress","label","tabBarLabel","undefined","title","accessibilityLabel","tabBarAccessibilityLabel","length","tabBarTestID","tabBarButton","tabBarIcon","create","left","right","bottom","borderRightWidth","hairlineWidth","elevation","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Keyboard,\n  Platform,\n  LayoutChangeEvent,\n  ScaledSize,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n} from '@react-navigation/native';\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\n\nimport SideTabItem from './SideTabItem';\n\n\nconst DEFAULT_TABBAR_HEIGHT = 50;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function SideTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  iconHorizontal = false,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  showIcon,\n  showLabel,\n  iconSize,\n  labelSize,\n  style,\n  tabWidth,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const [visible] = React.useState(() => new Animated.Value(1));\n  const { routes } = state;\n\n  return (\n    <SafeAreaConsumer>\n      {insets => (\n        <Animated.View\n          style={[\n            styles.tabBar,\n            {\n              backgroundColor: colors.card,\n              borderRightColor: colors.border,\n              paddingTop: insets ? insets.top : 0,\n            },\n            style,\n          ]}\n          pointerEvents={'auto'}\n        >\n          <View style={styles.content}>\n            {routes.map((route, index) => {\n              const focused = index === state.index;\n              const { options } = descriptors[route.key];\n\n              const onPress = () => {\n                const event = navigation.emit({\n                  type: 'tabPress',\n                  target: route.key,\n                  canPreventDefault: true,\n                });\n\n                if (!focused && !event.defaultPrevented) {\n                  navigation.dispatch({\n                    ...CommonActions.navigate(route.name),\n                    target: state.key,\n                  });\n                }\n              };\n\n              const onLongPress = () => {\n                navigation.emit({\n                  type: 'tabLongPress',\n                  target: route.key,\n                });\n              };\n\n              const label =\n                options.tabBarLabel !== undefined\n                  ? options.tabBarLabel\n                  : options.title !== undefined\n                  ? options.title\n                  : route.name;\n\n              const accessibilityLabel =\n                options.tabBarAccessibilityLabel !== undefined\n                  ? options.tabBarAccessibilityLabel\n                  : typeof label === 'string'\n                  ? `${label}, tab, ${index + 1} of ${routes.length}`\n                  : undefined;\n\n              return (\n                <NavigationContext.Provider\n                  key={route.key}\n                  value={descriptors[route.key].navigation}\n                >\n                  <NavigationRouteContext.Provider value={route}>\n                    <SideTabItem\n                      route={route}\n                      focused={focused}\n                      horizontal={iconHorizontal}\n                      onPress={onPress}\n                      onLongPress={onLongPress}\n                      accessibilityLabel={accessibilityLabel}\n                      testID={options.tabBarTestID}\n                      allowFontScaling={allowFontScaling}\n                      activeTintColor={activeTintColor}\n                      inactiveTintColor={inactiveTintColor}\n                      activeBackgroundColor={activeBackgroundColor}\n                      inactiveBackgroundColor={inactiveBackgroundColor}\n                      button={options.tabBarButton}\n                      iconSize={iconSize}\n                      labelSize={labelSize}\n                      icon={options.tabBarIcon}\n                      label={label}\n                      showIcon={showIcon}\n                      showLabel={showLabel}\n                      tabWidth={tabWidth}\n                      labelStyle={labelStyle}\n                      style={tabStyle}\n                    />\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              );\n            })}\n          </View>\n        </Animated.View>\n      )}\n    </SafeAreaConsumer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderRightWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n});\n"]}