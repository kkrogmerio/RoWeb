"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _SideTabBar = _interopRequireDefault(require("./SideTabBar"));

var T = _interopRequireWildcard(require("@react-navigation/stack"));

var _SafeAreaProviderCompat = _interopRequireDefault(require("./SafeAreaProviderCompat"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// color: rgb(28, 28, 30);
// font-size: 18px;
// font-weight: 500;
const HeaderView = ({
  headerTitle,
  tabBarLabel,
  descriptor
}) => {
  return /*#__PURE__*/_react.default.createElement(_SafeAreaProviderCompat.default, null, /*#__PURE__*/_react.default.createElement(T.Header, {
    statusBarHeight: 60,
    insets: {
      top: 0
    },
    styleInterpolator: () => {
      return {
        titleStyle: {},
        leftButtonStyle: {},
        leftLabelStyle: {},
        rightButtonStyle: {},
        backgroundStyle: {}
      };
    },
    layout: {
      width: 0
    },
    scene: {
      progress: {
        current: true
      },
      route: {
        name: 'test2'
      },
      descriptor
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, null, headerTitle || tabBarLabel)));
};

var _default = HeaderView;
exports.default = _default;
//# sourceMappingURL=HeaderViewNavigation.js.map