{"version":3,"sources":["SideTabView.js"],"names":["SceneContent","isFocused","children","colors","styles","content","backgroundColor","SideTabView","props","state","descriptors","lazy","rest","routes","loaded","setLoaded","index","container","pages","map","route","descriptor","key","unmountOnBlur","options","includes","StyleSheet","absoluteFill","render","defaultProps","create","flexDirection","flex","overflow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\n\nimport { TabNavigationState } from '@react-navigation/native';\nimport { useTheme } from '../theming';\n\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport TabBarView from './TabBarView';\nimport Header from './Header/Header';\n\n\nfunction SceneContent({\n  isFocused,\n  children,\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: 'red' }]}\n    >\n      {children}\n    </View>\n  );\n}\n\n\nconst SideTabView = (props) => {\n  const {\n    state,\n    descriptors,\n    lazy,\n    ...rest\n  } = props\n  const { routes } = state;\n  const [loaded, setLoaded] = useState([state.index]);\n\n  useEffect(() => {\n    setLoaded([...loaded, state.index])\n  }, [state.index]);\n\n  return (\n    <SafeAreaProviderCompat>\n      <View style={[\n        styles.container\n      ]}>\n        <TabBarView {...props}/>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            const descriptor = descriptors[route.key];\n            const { unmountOnBlur } = descriptor.options;\n            const isFocused = state.index === index;\n\n            if (unmountOnBlur && !isFocused) {\n              return null;\n            }\n\n            if (lazy && !loaded.includes(index) && !isFocused) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                <Header descriptor={descriptor}/>\n                <SceneContent isFocused={isFocused}>\n                  {descriptor.render()}\n                </SceneContent>\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      </View>\n    </SafeAreaProviderCompat>\n  );\n}\n\nSideTabView.defaultProps = {\n  lazy: true\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flex: 1,\n    overflow: 'hidden',\n    overflow: 'purple',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n\nexport default SideTabView;"]}