"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _native = require("@react-navigation/native");

var _theming = require("../theming");

var _reactNativeScreens = require("react-native-screens");

var _SafeAreaProviderCompat = _interopRequireDefault(require("./SafeAreaProviderCompat"));

var _ResourceSavingScene = _interopRequireDefault(require("./ResourceSavingScene"));

var _TabBarView = _interopRequireDefault(require("./TabBarView"));

var _Header = _interopRequireDefault(require("./Header/Header"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function SceneContent({
  isFocused,
  children
}) {
  const {
    colors
  } = (0, _theming.useTheme)();
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    accessibilityElementsHidden: !isFocused,
    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',
    style: [styles.content, {
      backgroundColor: 'red'
    }]
  }, children);
}

const SideTabView = props => {
  const {
    state,
    descriptors,
    lazy
  } = props,
        rest = _objectWithoutProperties(props, ["state", "descriptors", "lazy"]);

  const {
    routes
  } = state;
  const [loaded, setLoaded] = (0, _react.useState)([state.index]);
  (0, _react.useEffect)(() => {
    setLoaded([...loaded, state.index]);
  }, [state.index]);
  return /*#__PURE__*/_react.default.createElement(_SafeAreaProviderCompat.default, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container]
  }, /*#__PURE__*/_react.default.createElement(_TabBarView.default, props), /*#__PURE__*/_react.default.createElement(_reactNativeScreens.ScreenContainer, {
    style: styles.pages
  }, routes.map((route, index) => {
    const descriptor = descriptors[route.key];
    const {
      unmountOnBlur
    } = descriptor.options;
    const isFocused = state.index === index;

    if (unmountOnBlur && !isFocused) {
      return null;
    }

    if (lazy && !loaded.includes(index) && !isFocused) {
      // Don't render a screen if we've never navigated to it
      return null;
    }

    return /*#__PURE__*/_react.default.createElement(_ResourceSavingScene.default, {
      key: route.key,
      style: _reactNative.StyleSheet.absoluteFill,
      isVisible: isFocused
    }, /*#__PURE__*/_react.default.createElement(_Header.default, {
      descriptor: descriptor
    }), /*#__PURE__*/_react.default.createElement(SceneContent, {
      isFocused: isFocused
    }, descriptor.render()));
  }))));
};

SideTabView.defaultProps = {
  lazy: true
};

const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    flex: 1,
    overflow: 'hidden',
    overflow: 'purple'
  },
  pages: {
    flex: 1
  },
  content: {
    flex: 1
  }
});

var _default = SideTabView;
exports.default = _default;
//# sourceMappingURL=SideTabView.js.map