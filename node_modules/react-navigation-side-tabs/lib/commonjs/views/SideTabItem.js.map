{"version":3,"sources":["SideTabItem.js"],"names":["SideTabItem","focused","route","label","icon","button","children","style","rest","accessibilityLabel","testID","onPress","onLongPress","horizontal","activeTintColor","customActiveTintColor","inactiveTintColor","customInactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","iconSize","labelSize","tabWidth","showLabel","showIcon","allowFontScaling","labelStyle","colors","minTabWidth","console","warn","controlShowLabel","multiplier","Platform","OS","scene","width","labelWidth","undefined","primary","text","mix","card","hex","renderLabel","color","styles","labelHorizontal","labelVertical","labelBeside","labelBeneath","fontSize","renderIcon","backgroundColor","accessibilityRole","accessibilityStates","tab","tabHorizontal","tabVertical","StyleSheet","create","alignItems","justifyContent","flexDirection","textAlign","marginBottom","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  TouchableWithoutFeedback,\n  Animated,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform\n} from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\n\nfunction SideTabItem ({\n  focused,\n  route,\n  label,\n  icon,\n  button = ({ children, style, ...rest }) => (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  ),\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  iconSize = 32,\n  labelSize,\n  tabWidth = 0,\n  showLabel = true,\n  showIcon = true,\n  allowFontScaling,\n  labelStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n  \n  // For a good UX the navBar must bea at least 2x \n  // The size of the icon\n  const minTabWidth = iconSize * 2;\n  \n  if (tabWidth <= minTabWidth) {\n    console.warn(`The tabWidth must be at least ${minTabWidth} (2x the iconSize, ${iconSize})`)\n    tabWidth = minTabWidth;\n  }\n\n  // Only allow to show the label when the tabWidth has sufficient space\n  // to show at least some letters, in other case forces the labels to not show\n  const controlShowLabel = showLabel || (tabWidth > minTabWidth) && showLabel;\n  \n  // As we have other font configured into Android we need to control\n  // the size With a different multiplier\n  let multiplier = Platform.OS === 'android' ? 2.3 : 2;\n\n  // If the icons been showed as vertical we dont neet apply the \n  // multiplyer as it has the full row to display the text\n  if (!horizontal) {\n    multiplier = 1;\n  }\n\n  const scene = { route, focused };\n  const width = (tabWidth - iconSize);\n  const labelWidth = tabWidth - (iconSize * multiplier);\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text)\n          .mix(Color(colors.card), 0.5)\n          .hex()\n      : customInactiveTintColor;\n\n\n  const renderLabel = ({ focused }) => {\n    if (controlShowLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            horizontal ? styles.labelHorizontal : styles.labelVertical,\n            showIcon && horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n            { color, fontSize: labelSize, width: labelWidth },\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'string') {\n      return label;\n    }\n\n    return label({ focused, color });\n  };\n\n  const renderIcon = ({ focused }) => {\n    if (showIcon === false || icon === undefined) {\n      return null;\n    }\n\n    return (\n      <TabBarIcon\n        route={route}\n        size={iconSize}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n      />\n    );\n  };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor, width },\n      horizontal ? styles.tabHorizontal : styles.tabVertical,\n      style\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    )\n  })\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    alignItems: 'center',\n  },\n  tabVertical: {\n    justifyContent: 'flex-start',\n    flexDirection: 'column',\n  },\n  tabHorizontal: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    backgroundColor: 'transparent'\n  },\n  labelHorizontal: {\n    textAlign: 'left'\n  },\n  labelVertical: {\n    textAlign: 'center'\n  },\n  labelBeneath: {\n    fontSize: 11,\n    marginBottom: 1.5,\n  },\n  labelBeside: {\n    fontSize: 22,\n    marginLeft: 5,\n  },\n});\n\nexport default SideTabItem;\n"]}